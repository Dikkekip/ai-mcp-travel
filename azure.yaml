# yaml-language-server: $schema=https://raw.githubusercontent.com/Azure/azure-dev/main/schemas/v1.0/azure.yaml.json
name: mcp-container-ts
metadata:
  template: mcp-container-ts@0.1.0
services:
  mcp-container-ts:
    project: .
    host: containerapp
    language: ts
    docker:
      path: Dockerfile
      context: .
      remoteBuild: true
hooks:
  preprovision:
    posix:
      shell: sh
      continueOnError: false
      interactive: false
      run: |
        npm run generate-token -- --admin
        # Load .env file into azd environment
        set -a
        [ -f .env ] && . .env
        set +a
        env_dir=".azure/$(azd env get-value AZURE_ENV_NAME)"
        mkdir -p "$env_dir"
        cat .env >> "$env_dir/.env"
    windows:
      shell: pwsh
      continueOnError: false
      interactive: false
      run: |
        npm run generate-token -- --admin
        # Load .env file and set in azd environment if it exists
        if (Test-Path .env) {
          Get-Content .env | ForEach-Object {
            if ($_ -match '^\s*([^=]+)="?(.+?)"?\s*$') {
              $key = $matches[1]
              $value = $matches[2]
              Write-Host "Setting azd env: $key" -ForegroundColor Gray
              azd env set $key $value
            }
          }
        }
        # Save to .azure directory for reference
        $dotenv = Get-Content .env -ErrorAction SilentlyContinue
        if ($dotenv) {
          $envPath = ".\.azure\$(azd env get-value AZURE_ENV_NAME)"
          New-Item -ItemType Directory -Force -Path $envPath | Out-Null
          $dotenv | Out-File -FilePath "$envPath\.env" -Encoding utf8 -Force
        }
  postprovision:
    posix:
      shell: sh
      continueOnError: false
      interactive: false
      run: azd env get-values > .env
    windows:
      shell: pwsh
      continueOnError: false
      interactive: false
      run: azd env get-values | Out-File -FilePath .env -Encoding utf8 -Force
